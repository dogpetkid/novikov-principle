<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>prepare clickboxes for elements &amp; colors</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// define anchors

hanchor = 1/2*room_width;
vanchor = 1/2*room_height;


// define colors

c_normal = $808080;
c_clone = $8000b7;
c_locked = $0000ff;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>list levels (Deprecated)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Deprecated

// obj_level_select uses global.benchmarks[]
ltut = global.tut;
lbut = global.but;
lpp = global.pp;
lep = global.ep;
lb2 = global.b2;
ltrp = global.trp;
lshk = global.shk;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>prepare anchors</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// prepare clickboxes

draw_set_font(fnt_menu);

// Back
tback = "back";
x1back = 0.1*room_width;
y1back = 0.85*room_height;
x2back = x1back + string_width(tback);
y2back = y1back + string_height(tback);

// Tutorial
ttut = "Tutorial";
x1tut = 1/2 * hanchor - string_width(ttut)/2; // shift over to the (upper) left
y1tut = 1/2 * vanchor; // shift over to the upper (left)
x2tut = x1tut + string_width(ttut);
y2tut = y1tut + string_height(ttut);

// Buttons
tbut = "Buttons";
x1but = 1/2 * hanchor - string_width(tbut)/2; // shift over to the left
y1but = y1tut + 1.5*string_height(ttut);
x2but = x1but + string_width(tbut);
y2but = y1but + string_height(tbut);

// Pixel Perfect
tpp = "Pixel Perfect";
x1pp = 1/2 * hanchor - string_width(tpp)/2; // shift over to the left
y1pp = y1but + 1.5*string_height(tbut);
x2pp = x1pp + string_width(tpp);
y2pp = y1pp + string_height(tpp);

// Extended (Pixel) Perfect
tep = "Extended Perfect";
x1ep = 1/2 * hanchor - string_width(tep)/2; // shift over to the left
y1ep = y1pp + 1.5*string_height(tpp);
x2ep = x1ep + string_width(tep);
y2ep = y1ep + string_height(tep);

// Extended (Pixel) Perfect
tb2 = "Buttons 2";
x1b2 = 1/2 * hanchor - string_width(tb2)/2; // shift over to the left
y1b2 = y1ep + 1.5*string_height(tep);
x2b2 = x1b2 + string_width(tb2);
y2b2 = y1b2 + string_height(tb2);


// Second column

// Traps
ttrp = "Traps";
x1trp = 3/2 * hanchor - string_width(ttrp)/2; // shift over to the (upper) right
y1trp = 1/2 * vanchor; // shift over to the upper (right)
x2trp = x1trp + string_width(ttrp);
y2trp = y1trp + string_height(ttrp);

// Shockers
tshk = "Shockers";
x1shk = 3/2 * hanchor - string_width(tshk)/2; // shift over to the right
y1shk = y1trp + 1.5*string_height(ttrp);
x2shk = x1shk + string_width(tshk);
y2shk = y1shk + string_height(tshk);

// Floors
tflr = "Floors";
x1flr = 3/2 * hanchor - string_width(tflr)/2; // shift over to the right
y1flr = y1shk + 1.5*string_height(tshk);
x2flr = x1flr + string_width(tflr);
y2flr = y1flr + string_height(tflr);


// More soon
tmore = "More soon";
x1more = 3/2 * hanchor - string_width(tmore)/2;
y1more = y1b2; // looks cleaner aligned with Buttons 2
x2more = x1more + string_width(tmore);
y2more = y1more + string_height(tmore);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>check for clicking on elements</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// check for clicking inside boxes

// scp_button_pressed(x1,y1,x2,y2);

ini_open("save.ini");


// back
if(scp_button_pressed(x1back,y1back,x2back,y2back) || 
   keyboard_check_pressed(vk_escape)) {
    
    room_goto(rm_main_menu);

}

// Tutorial
if(scp_button_pressed(x1tut,y1tut,x2tut,y2tut)) {

    
    room_goto(ltut);

}



// make sure the player has been to that section for all sections below

// section index refers to what spot of the global.benchmarks a section holds

// scp_level_select_room_goto(x1,y1,x2,y2, section index );

// Button
scp_level_select_room_goto(x1but,y1but,x2but,y2but,1);

// Pixel Perfect
scp_level_select_room_goto(x1pp,y1pp,x2pp,y2pp,2);

// Extended (pixel) Perfect
scp_level_select_room_goto(x1ep,y1ep,x2ep,y2ep,3);

// Buttons 2
scp_level_select_room_goto(x1b2,y1b2,x2b2,y2b2,4);

// Traps
scp_level_select_room_goto(x1trp,y1trp,x2trp,y2trp,5);

// Shockers
scp_level_select_room_goto(x1shk,y1shk,x2shk,y2shk,6);

// Floors
scp_level_select_room_goto(x1flr,y1flr,x2flr,y2flr,7);

ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>set constant drawing variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_menu);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw level sections</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// render all the buttons

// scp_render_button(x1,y1,x2,y2,text,c_hovered,c_normal);

ini_open("save.ini");

// back
scp_render_button(x1back,y1back,x2back,y2back,tback,c_clone,c_black);

// Tutorial
scp_render_button(x1tut,y1tut,x2tut,y2tut,ttut,c_clone,c_normal);

// More soon
scp_render_button(x1more,y1more,x2more,y2more,tmore,c_normal,c_normal);



// Sections below all are red when the are locked

// section index refers to what spot of the global.benchmarks a section holds

// scp_render_button_lockable(x1,y1,x2,y2,text,c_hovered,c_normal, section index,
//     c_hovered_locked,c_normal_locked);


// Button
scp_render_button_lockable(x1but,y1but,x2but,y2but,tbut,c_clone,c_normal,1,
    c_locked,c_locked);

// Pixel Perfect
scp_render_button_lockable(x1pp,y1pp,x2pp,y2pp,tpp,c_clone,c_normal,2,
    c_locked,c_locked);

// Extended (Pixel) Perfect
scp_render_button_lockable(x1ep,y1ep,x2ep,y2ep,tep,c_clone,c_normal,3,
    c_locked,c_locked);

// Buttons 2
scp_render_button_lockable(x1b2,y1b2,x2b2,y2b2,tb2,c_clone,c_normal,4,
    c_locked,c_locked);

// Traps
scp_render_button_lockable(x1trp,y1trp,x2trp,y2trp,ttrp,c_clone,c_normal,5,
    c_locked,c_locked);

// Shockers
scp_render_button_lockable(x1shk,y1shk,x2shk,y2shk,tshk,c_clone,c_normal,6,
    c_locked,c_locked);

// Floors
scp_render_button_lockable(x1flr,y1flr,x2flr,y2flr,tflr,c_clone,c_normal,7,
    c_locked,c_locked);

ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
